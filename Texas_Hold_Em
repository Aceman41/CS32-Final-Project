import random

deck = ["AC", "2C", "3C", "4C", "5C", "6C", "7C", "8C", "9C", "10C", "JC", "QC", "KC", "AS", "2S", "3S", "4S", "5S", "6S", "7S", "8S", "9S", "10S", "JS", "QS", "KS", "AH", "2H", "3H", "4H", "5H", "6H", "7H", "8H", "9H", "10H", "JH", "QH", "KH", "AD", "2D", "3D", "4D", "5D", "6D", "7D", "8D", "9D", "10D", "JD", "QD", "KD"]
player1_hole = []
player2_hole = []
player3_hole = []
player4_hole = []
player5_hole = []
player6_hole = []
player7_hole = []
player_holes = [player1_hole, player2_hole, player3_hole, player4_hole, player5_hole, player6_hole, player7_hole]
community_pot = []
burned_cards = []
player1_bal = 0
player2_bal = 0
player3_bal = 0
player4_bal = 0
player5_bal = 0
player6_bal = 0
player7_bal = 0
player_bals = [player1_bal, player2_bal, player3_bal, player4_bal, player5_bal, player6_bal, player7_bal]
bet_pot = 0
bet_list = []

print("###/ Welcome to Texas Hold 'Em \###\n")
print('You can play with as few as 1 and as many as 6 people.')
while True:
  options = ['1', '2', '3', '4', '5', '6']
  try:
    how_many_players = input("Input the number of people you would like to play with in addition to yourself\n(an input of 4 will create 4 hands other than your own): ")
    if how_many_players not in options:
      raise Exception
    break
  except:
    print("You must choose between 1 and 6 people to play with. Please try again.\n")

random.shuffle(deck)

def initial_deal(num_of_players):
  for i in range(int(num_of_players)+1):
    player_holes[i].append(deck.pop(0))
    player_holes[i].append(deck.pop(0))

def community_deal(num_of_cards):
  for i in range(int(num_of_cards)):
    community_pot.append(deck.pop(0))

def betting(num_of_players, bet_pot):
  bet_list = []
  for i in range(int(num_of_players)+1):
    while True:
      print(f'\nPlayer {i+1}: ')
      if player_bals[i] == 0:
        player_bals[i] = 100
      try:
        bet = int(input("Enter the amount you want to bet: "))
        if bet > player_bals[i]:
          raise ValueError('Bet cannot exceed player balance. Try Again.')
        if 0 > bet:
          raise ValueError('Cannot bet a negative amount. Try Again.')
        player_bals[i] = player_bals[i] - bet
        bet_list.append(bet)
        bet_pot += bet
        print(f'bet pot: ', bet_pot)
        break
      except:
        ValueError()
  while all(element == max(bet_list) for element in bet_list) != True:
    highest_bet = int(max(bet_list))
    player = 0
    for i in bet_list:
      player += 1
      if highest_bet == int(i):
        continue
      if highest_bet > int(i):
        while True:
          print(f'\nPlayer {player}: ')
          options2 = ['match', 'raise', 'fold']
          try:
            mrf = input(f"You must match the highest bet of {highest_bet}, raise to a higher bet, or fold.\nPlease input 'match', 'raise', or 'fold': ")
            if mrf not in options2:
              raise ValueError('You must choose to match, raise, or fold. Try again.')
            if mrf == 'match':
              bet_pot -= i
              bet_pot += highest_bet
              print(f'bet pot: ', bet_pot)
              player_bals[player-1] += i
              player_bals[player-1] -= highest_bet
              bet_list[bet_list.index(i)] = highest_bet
              break
            if mrf == 'raise':
              while True:
                try:
                  bet = int(input("Enter the amount to which you'd like to raise your bet: "))
                  if bet > player_bals[player-1]:
                    raise ValueError('Bet cannot exceed player balance. Try Again.')
                  if highest_bet >= bet:
                    raise ValueError(f'You cannot raise your bet to an amount lower than or equal to {highest_bet}. Try Again.')
                  if 0 > bet:
                    raise ValueError('Cannot bet a negative amount. Try Again.')
                  bet_pot -= i
                  bet_pot += bet
                  print(f'bet pot: ', bet_pot)
                  player_bals[player-1] += i
                  player_bals[player-1] -= bet
                  bet_list[bet_list.index(i)] = bet
                  break
                except:
                  ValueError()
              break
            if mrf == 'fold':
              bet_list.remove(i)
              player_holes[player-1] = []
              break
          except:
            ValueError('You must choose to match, raise, or fold. Try again.')
  return bet_pot

## For next additions: (1) create logic that determines whose hand is best
##
## General Game Outline:
##      1. initial deal
##      2. betting
##      3. burn card
##      4. put 3 'flop' cards into community pot
##      5. betting
##      6. burn another card
##      7. put the 4th 'turn' card into the community pot
##      8. betting
##      9. burn another card
##     10. put the 5th 'river' card into the community pot
##     11. final betting
##     12. round ends

initial_deal(how_many_players)
while True:
  print("\nEach player will start with a balance of 100.\nBets must not exceed a player's balance and must be a positive number.")
  bet_pot = betting(how_many_players, bet_pot)
  if len([i for i in player_holes if i]) <= 1:
    for j in player_holes:
      if j != []:
        ind = player_holes.index(j)
        player_bals[ind] += bet_pot
        bet_pot = 0
    break
  print(f'Player 1 balance: ', player_bals[0])
  print(f'Player 2 balance: ', player_bals[1])
  burned_cards.append(deck.pop(0))
  print(f'Burned Cards: ', burned_cards)
  community_deal('3')
  print(f'Community Pot: ', community_pot)
  bet_pot = betting(how_many_players, bet_pot)
  if len([i for i in player_holes if i]) <= 1:
    for j in player_holes:
      if j != []:
        ind = player_holes.index(j)
        player_bals[ind] += bet_pot
        bet_pot = 0
    break
  print(f'Player 1 balance: ', player_bals[0])
  print(f'Player 2 balance: ', player_bals[1])
  burned_cards.append(deck.pop(0))
  print(f'Burned Cards: ', burned_cards)
  community_deal('1')
  print(f'Community Pot: ', community_pot)
  bet_pot = betting(how_many_players, bet_pot)
  if len([i for i in player_holes if i]) <= 1:
    for j in player_holes:
      if j != []:
        ind = player_holes.index(j)
        player_bals[ind] += bet_pot
        bet_pot = 0
    break
  print(f'Player 1 balance: ', player_bals[0])
  print(f'Player 2 balance: ', player_bals[1])
  burned_cards.append(deck.pop(0))
  print(f'Burned Cards: ', burned_cards)
  community_deal('1')
  print(f'Community Pot: ', community_pot)
  bet_pot = betting(how_many_players, bet_pot)
  if len([i for i in player_holes if i]) <= 1:
    for j in player_holes:
      if j != []:
        ind = player_holes.index(j)
        player_bals[ind] += bet_pot
        bet_pot = 0
    break
  print(f'Player 1 balance: ', player_bals[0])
  print(f'Player 2 balance: ', player_bals[1])
  break

## Temporary print statements below show that number of computer inputs, shuffling, and initial dealing all work as intended

print('\n')
print(f'Player 1 hole: ', player_holes[0])
print(f'Player 2 hole: ', player_holes[1])
print(f'Player 3 hole: ', player_holes[2])
print(f'Player 4 hole: ', player_holes[3])
print(f'Player 5 hole: ', player_holes[4])
print(f'Player 6 hole: ', player_holes[5])
print(f'Player 7 hole: ', player_holes[6])
print(f'Community Pot: ', community_pot)
print(f'Burned Cards: ', burned_cards)
print(f'Player 1 balance: ', player_bals[0])
print(f'Player 2 balance: ', player_bals[1])
print(f'Player 3 balance: ', player_bals[2])
print(f'Player 4 balance: ', player_bals[3])
print(f'Player 5 balance: ', player_bals[4])
print(f'Player 6 balance: ', player_bals[5])
print(f'Player 7 balance: ', player_bals[6])
print(f'Bet Pot: ', bet_pot)
